. /* For this project, I downloaded Spotify data (.csv) from Kaggle and created the following table to insert that Spotify data into.
    Then, I explored the data using the following SQL. */ 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--what are the top 10 songs based on popularity?
SELECT popularity, track_name, artist_name
    FROM BIT_DB.Spotifydata
    ORDER BY popularity DESC
    LIMIT 10;

--what artist has the most songs in the top 50 songs of 2021 and how many songs?
SELECT COUNT(artist_name) AS total_songs, artist_name
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name
    ORDER BY COUNT(artist_name) DESC;

--display artist's that have more than one song and artist's that have only one song in the top 50 songs of 2021.
SELECT COUNT(artist_name) AS total_songs, artist_name,
    CASE
        WHEN COUNT(artist_name) > 1 THEN 'multiple_songs'
        ELSE 'one_song'
    END AS 'top_50'
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name
    ORDER BY COUNT(artist_name) DESC;

--which artist released the loudest song?
SELECT artist_name, track_name, loudness
    FROM BIT_DB.Spotifydata
    ORDER BY loudness DESC;

--what is the average danceability by artist and track?
SELECT artist_name, track_name, AVG(danceability)
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name, track_name
    ORDER BY AVG(danceability) DESC;

--what song has the highest and lowest valence?
SELECT artist_name, track_name, valence
    FROM BIT_DB.Spotifydata
    ORDER BY valence DESC;

